[#ftl]
[#--template for the client class.--]
// Generated by xsd compiler for android/java
// DO NOT CHANGE!
package ${clazz.packageName};

import java.io.Serializable;
import com.leansoft.nano.annotation.*;
[#list imports as import]
import ${import};
[/#list]

[#if clazz.docComment??]
/**
 * ${clazz.docComment?replace("\n", "\n * ")?replace("\t", "")}
 */
[/#if]
[#if clazz.rootElementAnnotation?? && clazz.rootElementAnnotation.parameterProvided]
@com.leansoft.nano.annotation.${clazz.rootElementAnnotation}
[/#if]
[#--
[#if clazz.xmlTypeAnnotation?? && clazz.xmlTypeAnnotation.parameterProvided]
@${clazz.xmlTypeAnnotation}
[/#if]
--]
public [#if clazz.abstract]abstract [/#if]class ${clazz.name} [#if clazz.superClass??]extends ${clazz.superClass.name} [/#if]implements Serializable {

    private static final long serialVersionUID = -1L;

    [#list clazz.fields as field]
	[#if field.attribute][#-- map to xml attribute --]
	  [#if field.attributeAnnotation?? && field.attributeAnnotation.parameterProvided]
	@${field.attributeAnnotation}
	  [#else]
	@Attribute  
	  [/#if]
	[#elseif field.element][#-- map to xml element --]
	  [#if field.elementAnnotation?? && field.elementAnnotation.parameterProvided]
	@com.leansoft.nano.annotation.${field.elementAnnotation}
	  [#else]
	@com.leansoft.nano.annotation.Element
	  [/#if]
	[#elseif field.value][#-- map to xml value --]
	@Value
	[#elseif field.any][#-- map to xml any element --]
	@AnyElement
	[/#if]  
	[#if config.nanoPrivateField]
	@Order(value=${field_index})
	private ${field.type.name} ${field.name};
	[#else]
	@Order(value=${field_index})
	public ${field.type.name} ${field.name};	
	[/#if]
	
    [/#list]
    
    [#if config.nanoPrivateField]
    [#list clazz.fields as field]  
    [#if field.docComment??]
	/**
     * public getter
     *
     * ${field.docComment?replace("\n", "\n     * ")?replace("\t", "")}
     *
     * @returns ${field.type.fullName}
	 */
	[#else]
	/**
	 * public getter
	 *
     * @returns ${field.type.fullName}
	 */
	[/#if]
	public ${field.type.name} get${field.name?cap_first}() {
	    return this.${field.name};
	}
	
    [#if field.docComment??]
	/**
	 * public setter
	 *
     * ${field.docComment?replace("\n", "\n     * ")?replace("\t", "")}
     *
     * @param ${field.type.fullName}
	 */
	[#else]
	/**
	 * public setter
	 *
     * @param ${field.type.fullName}
	 */
	[/#if]
	public void set${field.name?cap_first}(${field.type.name} ${field.name}) {
	    this.${field.name} = ${field.name};
	}
	[/#list]
    [/#if]
}