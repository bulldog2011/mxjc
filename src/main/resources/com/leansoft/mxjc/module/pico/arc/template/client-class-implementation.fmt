[#ftl]
[#--template for the client-side complex/simple type interface.--]
// Generated by xsd compiler for ios/objective-c
// DO NOT CHANGE!

#import <Foundation/Foundation.h>
#import "${clazz.name}.h"
[#list fieldClassImports as import]
#import "${import}.h"
[/#list]

@implementation ${clazz.name}

[#list clazz.fields as field]
@synthesize ${field.name};
[/#list]

// class meta-data method
// note: this method is only for internal use, DO NOT CHANGE!
+(PicoClassSchema *)getClassMetaData {
[#if clazz.rootElementAnnotation?? && clazz.rootElementAnnotation.parameterProvided]
    PicoClassSchema *cs = [[PicoClassSchema alloc] initWithXmlName:@"${clazz.rootElementAnnotation.name}" nsUri:@"${clazz.rootElementAnnotation.namespace}"];
    return cs;
[#else]
    return nil;
[/#if]
}

// property meta-data method
// note: this method is only for internal use, DO NOT CHANGE!
+(NSMutableDictionary *)getPropertyMetaData {
    NSMutableDictionary *map = [NSMutableDictionary dictionary];
    @autoreleasepool {
	[#assign flag=false]
    
[#list clazz.fields as field]
    [#assign xmlName = field.name]
    [#if field.elementAnnotation?? && field.elementAnnotation.parameterProvided]
	  [#assign xmlName = field.elementAnnotation.name]
	[#elseif field.attributeAnnotation?? && field.attributeAnnotation.parameterProvided]
	  [#assign xmlName = field.attributeAnnotation.name]
	[/#if]
	[#if field.attribute][#-- map to xml attribute --]
	  [#if !flag]
	     [#assign flag=true]
    	 PicoPropertySchema *ps = nil;
	[/#if]
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ATTRIBUTE xmlName:@"${xmlName}" propertyName:@"${field.name}" type:${field.type.name} clazz:[#if !field.type.primitive][${field.type.fullName} class][#else]nil[/#if]];
    [map setObject:ps forKey:@"${field.name}"];
	[#elseif field.element][#-- map to xml element --]
	    [#if field.type.collection && (field.type.typeParameters)?? && field.type.typeParameters?size > 0]
		    [#assign type = field.type.typeParameters?first]
	        [#if !flag]
	            [#assign flag=true]
    PicoPropertySchema *ps = nil;
	        [/#if]
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT_ARRAY xmlName:@"${xmlName}" propertyName:@"${field.name}" type:${type.name} clazz:[#if !type.primitive][${type.fullName} class][#else]nil[/#if]];
    [map setObject:ps forKey:@"${field.name}"];
	    [#else]
	        [#if !flag]
	            [#assign flag=true]
    PicoPropertySchema *ps = nil;
	        [/#if]
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ELEMENT xmlName:@"${xmlName}" propertyName:@"${field.name}" type:${field.type.name} clazz:[#if !field.type.primitive][${field.type.fullName} class][#else]nil[/#if]];
    [map setObject:ps forKey:@"${field.name}"];
	    [/#if]
	[#elseif field.value][#-- map to xml value --]
	    [#if !flag]
	        [#assign flag=true]
    PicoPropertySchema *ps = nil;
	    [/#if]
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_VALUE xmlName:nil propertyName:@"${field.name}" type:${field.type.name} clazz:[#if !field.type.primitive][${field.type.fullName} class][#else]nil[/#if]];
    [map setObject:ps forKey:@"${field.name}"];
    [#else][#-- map to xml any --]
        [#if !flag]
	       [#assign flag=true]
    PicoPropertySchema *ps = nil;
	    [/#if]
	    [#if field.type.collection && (field.type.typeParameters)?? && field.type.typeParameters?size > 0]
	        [#assign type = field.type.typeParameters?first]
	    [#else]
	        [#assign type = field.type]
	    [/#if]
    ps = [[PicoPropertySchema alloc] initWithKind:PICO_KIND_ANY_ELEMENT xmlName:@"${xmlName}" propertyName:@"${field.name}" type:${type.name} clazz:[#if !type.primitive][${type.fullName} class][#else]nil[/#if]];
    [map setObject:ps forKey:@"${field.name}"];
	[/#if]                     
[/#list]
    }return map;
}



-(void)dealloc {
[#list clazz.fields as field]
    self.${field.name} = nil;
[/#list]
}

@end
